#!/bin/bash

# finds the active sink for pulse audio and increments the volume. useful when you have multiple audio outputs and have a key bound to vol-up and down

osd='no'
inc='1'
capvol='yes'
maxvol='100'
tmpfile='/tmp/pasink.tmp'
autosync='no'

active_sink=`pacmd list-sinks |awk '/* index:/{print $3}'`
active_source=`pacmd list-sources |awk '/* index:/{print $3}'`
limit=$(expr 100 - ${inc})
maxlimit=$(expr ${maxvol} - ${inc})

function volUp {

        getCurVol

        if [ ${capvol} = 'yes' ]
        then
                if [ ${curVol} -le 100 -a ${curVol} -ge ${limit} ]
                then
                        pactl set-sink-volume ${active_sink} 100%
                elif [ ${curVol} -lt ${limit} ]
                then
                        pactl set-sink-volume ${active_sink} +${inc}%
                fi
        elif [ ${curVol} -le ${maxvol} -a ${curVol} -ge ${maxlimit} ]
        then
                pactl set-sink-volume ${active_sink} ${maxvol}%
        elif [ ${curVol} -lt ${maxlimit} ]
        then
                pactl set-sink-volume ${active_sink} +${inc}%
        fi

        getCurVol

        if [ ${osd} = 'yes' ]
        then
                qdbus org.kde.kded /modules/kosd showVolume ${curVol} 0
        fi

        if [ ${autosync} = 'yes' ]
        then
                volSync
        fi
}

function volSet {

    newVol=$1

    re='^[0-9]+$'
    if ! [[ ${newVol} =~ ${re} ]]
    then
	echo "err: invalid volume" >&2; exit 1
    fi
    
    if [ ${capvol} = 'yes' ]
    then
	if [ ${newVol} -ge ${maxvol} ]
	then
	    pactl set-sink-volume ${active_sink} 100%
	else
	    pactl set-sink-volume ${active_sink} ${newVol}%
	fi
    else
	pactl set-sink-volume ${active_sink} ${newVol}%
    fi

    getCurVol

    if [ ${osd} = 'yes' ]
    then
	qdbus org.kde.kded /modules/kosd showVolume ${curVol} 0
    fi

    if [ ${autosync} = 'yes' ]
    then
	volSync
    fi
    
    
}

function volDown {

        pactl set-sink-volume ${active_sink} -${inc}%
        getCurVol

        if [ ${osd} = 'yes' ]
        then
                qdbus org.kde.kded /modules/kosd showVolume ${curVol} 0
        fi

        if [ ${autosync} = 'yes' ]
        then
                volSync
        fi

}

function getSinkInputs {

        inputs=`pacmd list-sink-inputs |grep -B 4 'sink: '${1}' ' |awk '/index:/{print $2}' >${tmpfile}`
        input_array=`cat $tmpfile`
}

function volSync {

        getSinkInputs ${active_sink}
        getCurVol

        for each in ${input_array}
        do
                pactl set-sink-input-volume ${each} ${curVol}%
        done

}

function getCurVol {

        curVol=`pacmd list-sinks |grep -A 15 'index: '${active_sink}'' |grep 'volume:' |egrep -v 'base volume:' |awk -F : '{print $3}' |grep -o -P '.{0,3}%'|sed s/.$// |tr -d ' '`

}

function volMute {

        case "$1" in
                mute)
                        pactl set-sink-mute ${active_sink} 1
                        curVol=0
                        status=1
                ;;
                unmute)
                        pactl set-sink-mute ${active_sink} 0
                        getCurVol
                        status=0
                ;;
        esac

        if [ ${osd} = 'yes' ]
        then
                qdbus org.kde.kded /modules/kosd showVolume ${curVol} ${status}
        fi

}

function micMute {

    case "$1" in
	mute)
	    pactl set-source-mute ${active_source} 1
	    ;;
	unmute)
	    pactl set-source-mute ${active_source} 0
	    ;;
    esac
    
}

function volMuteStatus {

    curStatus=$(getMute)

        if [ ${curStatus} = 'yes' ]
        then
                volMute unmute
        else
                volMute mute
        fi

}

function micMuteStatus {

    pactl set-source-mute ${active_source} toggle
    
}

function getVolume {

    pacmd list-sinks | grep -A 15 '\* index:' | awk '/volume/{ print $5 }' | head -n 1 |sed 's/%//g'
    
}

function getMute {

    pacmd list-sinks |grep -A 15 '\* index:' |awk '/muted/{ print $2}'
    
}

function listen {

    volume_print

    pactl subscribe | while read -r event; do
        if echo "$event" | grep -q "sink #${active_sink}"; then
            volume_print
        fi
    done
}

function volume_print {
    mute_status=`pavolume --getmute`
    vol_status=`pavolume --getvol`

    if [[ ${mute_status} = 'yes' ]]; then
	echo "%{F$(xrdb -query -all | awk '/*.color1:/ {print $2}')}  ${vol_status}"
    else
	echo "%{F-} ${vol_status}"
    fi
}

case "$1" in
        --up)
                volUp
        ;;
        --down)
                volDown
        ;;
        --togmute)
                volMuteStatus
        ;;
        --mute)
                volMute mute
        ;;
        --unmute)
                volMute unmute
        ;;
        --sync)
                volSync
		;;
	--set)
	    volSet $2
	    ;;
	--togmicmute)
	    micMuteStatus
	    ;;
	--micmute)
	    micMute mute
	    ;;
	--micunmute)
	    micMute unmute
	    ;;
	--getvol)
	    getVolume
	    ;;
	--getmute)
	    getMute
	    ;;
	--subscribe)
	    listen
	    ;;
esac
